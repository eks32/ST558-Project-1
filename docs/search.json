[
  {
    "objectID": "GroupAMain.html",
    "href": "GroupAMain.html",
    "title": "ST558 Project 1: Group A",
    "section": "",
    "text": "Loading required libraries, include = FALSE.\n\nNext, write a helper function to take what is returned by GET() and turn it into a nice tibble.\n\n??? idk what this means\n\n\n\nAPI Call\n\nTODO:\nData processing: Data cleaning: Subsetting data. Will add narrative on sunday.\n\nPums_APIdata &lt;- function(year=2022, num_variables =c(\"AGEP\",\"PWGTP\"),cat_variables=\"SEX\",geography=\"ALL\",Opt_subset){\n  #Automatically capitalize our variables\n  num_variables&lt;-toupper(num_variables)\n  cat_variables&lt;-toupper(cat_variables)\n  geography&lt;-toupper(geography) \n  \n  #Year Range Check\n  if (year &lt; 2010 | year &gt; 2022){\n    print(\"Invalid Year.  Acceptable year range: 2010-2022.\")\n    return()\n    }\n  \n  #Numeric Variable check\n  if (!num_variables %in% c(\"AGEP\",\"GASP\",\"JWAP\",\"JWDP\",\"JWMNP\",\"PWGTP\")){\n    print(\"Invalid Numeric Variable\")\n    return()\n    }\n  #if PWGTP is the only variable, return error.\n  else if((length(num_variables) == 1 && num_variables == \"PWGTP\")){\n    print(\"Need another numerical variable other than PWGTP\")\n    return()\n    }\n  #if PWGTP not in set, adds it\n  else if(!(\"PWGTP\" %in% num_variables)){\n    num_variables &lt;-c(num_variables,\"PWGTP\")\n  }\n  \n  #Categorical Variable Check\n  #TODO: add error checking for categorical\n  \n  #Geography Check\n  if (!geography %in% c(\"ALL\", \"REGION\", \"DIVISION\", \"STATE\")){\n    print(\"Invalid Geography Variable: Choose from ALL,REGION,DIVISION,or STATE.\")\n    return()\n  }\n\n  \n  #API key here:\n  API_key&lt;-\"2b989c8e8efa3003c17e6eb0ca728a968e04a441\" \n  \n  \n  #Adding num/cat variables to our url\n  variables_url&lt;-paste(c(num_variables,cat_variables),collapse=\",\")\n  \n  #Base URL w/ year variable\n  base_pums_url &lt;-paste(\"https://api.census.gov/data/\",year,\"/acs/acs1/pums?get=\",variables_url,sep=\"\")\n  \n  #Adding geography to URL\n  if (geography == \"ALL\"){\n    full_url &lt;- paste(base_pums_url,\"&SCHL=24&key=\",API_key,sep=\"\")}\n    else if (geography == \"REGION\"){\n      full_url &lt;- paste(base_pums_url,\"&for=region:*&SCHL=24&key=\",API_key,sep=\"\")}\n    else if (geograph == \"DIVISION\"){\n      full_url &lt;- paste(base_pums_url,\"for=division:*&SCHL=24&key=\",API_key,sep=\"\")}\n    else if (geography == \"STATE\"){\n      full_url &lt;- paste(base_pums_url,\"&for=state:*&SCHL=24&key=\",API_key,sep=\"\")}\n  \n  #API Fetch:\n  pums_fetch &lt;- httr::GET(full_url)\n  \n  #Decoding data: \n  #TODO: Need to use helper function here to do this part:\n  \n  pums_df &lt;- fromJSON(rawToChar(pums_fetch$content))\n  pums_tibble &lt;- as_tibble(pums_df)\n  #TODO: Clean data.  Fix column names etc...\n  #TODO: Subset data for geography\n  \n  #Diagonostics: delete later\n  print(paste(\"API URL:\",full_url))\n  print(\"Numeric Variables:\")\n  print(num_variables)\n  print(\"Categorical Variables:\")\n  print(cat_variables)\n  print(paste(\"Geography:\",geography))\n  \n  \n  #Returns tibble\n  return(pums_tibble)\n}\n\nTesting exception cases/output:\n\nPums_APIdata(2009)\n\n[1] \"Invalid Year.  Acceptable year range: 2010-2022.\"\n\n\nNULL\n\n#Pums_APIdata(2012)\nPums_APIdata(2012,num_variables=\"pwgtp\")\n\n[1] \"Need another numerical variable other than PWGTP\"\n\n\nNULL\n\nPums_APIdata(2012,num_variables =\"agep\")\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n[1] \"API URL: https://api.census.gov/data/2012/acs/acs1/pums?get=AGEP,PWGTP,SEX&SCHL=24&key=2b989c8e8efa3003c17e6eb0ca728a968e04a441\"\n[1] \"Numeric Variables:\"\n[1] \"AGEP\"  \"PWGTP\"\n[1] \"Categorical Variables:\"\n[1] \"SEX\"\n[1] \"Geography: ALL\"\n\n\n# A tibble: 27,782 × 4\n   V1    V2    V3    V4   \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 AGEP  PWGTP SEX   SCHL \n 2 29    46    1     24   \n 3 46    45    2     24   \n 4 61    53    2     24   \n 5 65    45    2     24   \n 6 33    63    1     24   \n 7 32    61    2     24   \n 8 68    90    2     24   \n 9 68    56    1     24   \n10 32    50    2     24   \n# ℹ 27,772 more rows\n\nPums_APIdata(2012,num_variables=\"Agep\",geography = \"City\")\n\n[1] \"Invalid Geography Variable: Choose from ALL,REGION,DIVISION,or STATE.\"\n\n\nNULL\n\n\n\n\n\nLastly, write a function that allows the user to specify multiple years of survey data (and all the other\n\n\noptions above)"
  }
]