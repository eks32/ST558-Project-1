[
  {
    "objectID": "GroupAMain.html",
    "href": "GroupAMain.html",
    "title": "ST558 Project 1: Group A",
    "section": "",
    "text": "Loading required libraries, include = FALSE.\n\nNext, write a helper function to take what is returned by GET() and turn it into a nice tibble.\n\n??? idk what this means\n\n\nI think something like this. I called this function in the end of api_fun\n\n# added by Jay for conversion of JSON GET to tibble\nconvert_to_tibble &lt;- function(response) {\n  json_content &lt;- fromJSON(rawToChar(response$content))\n  as_tibble(json_content[-1, ]) |&gt;\n    setNames(json_content[1, ])\n}\n\n\n# added by Jay for converting chr to datetime format\nget_time &lt;- function(variable) {\n  url &lt;- paste0(\"https://api.census.gov/data/2022/acs/acs1/pums/variables/\", variable, \".json\")\n  response &lt;- GET(url)\n  \n  # added by Jay for error handling\n  if (status_code(response) != 200) {\n    stop(\"error for: \", variable)\n  }\n  \n  temp_list &lt;- fromJSON(rawToChar(response$content))\n  time_info &lt;- temp_list$values$item\n  time_catg_info &lt;- time_info[sort(names(time_info))]\n  \n  return(time_catg_info)\n}\n\n# added by Jay for converting chr to datetime format\nconvert_time_code &lt;- function(code, time_catg_info) {\n  if (code %in% names(time_catg_info)) {\n    # extract the time range as a string\n    time_range &lt;- time_catg_info[[code]]\n    time_parts &lt;- strsplit(time_range, \" to \")[[1]]\n    time_parts &lt;- gsub(\"a.m.\", \"AM\", time_parts)\n    time_parts &lt;- gsub(\"p.m.\", \"PM\", time_parts)\n    start_time &lt;- strptime(time_parts[1], format = \"%I:%M %p\")\n    end_time &lt;- strptime(time_parts[2], format = \"%I:%M %p\")\n    \n    # calc the middle of the time period\n    if (!is.na(start_time) && !is.na(end_time)) {\n      middle_time &lt;- start_time + as.difftime(difftime(end_time, start_time, units = \"mins\") / 2, units = \"mins\")\n      return(as.POSIXct(middle_time, format = \"%Y-%m-%d %H:%M:%S\"))\n    } else {\n      return(NA)\n    }\n  } else {\n    return(NA)\n  }\n}\n\n\n# typeof(convert_time_code(\"055\", get_time(\"JWAP\")))\n# get_time(\"JWAP\")\n\n\n\n\nAPI Call\n\nTODO:\nData processing: Data cleaning: Subsetting data. Will add narrative on sunday.\n\n# changed by Jay to add option for subsetting data\nPums_APIdata &lt;- function(year=2022, num_variables =c(\"AGEP\",\"PWGTP\"),cat_variables=\"SEX\",geography=\"STATE\",Opt_subset=\"01\"){\n  #Automatically capitalize our variables\n  num_variables&lt;-toupper(num_variables)\n  cat_variables&lt;-toupper(cat_variables)\n  geography&lt;-toupper(geography) \n  \n  #Year Range Check\n  if (year &lt; 2010 | year &gt; 2022){\n    print(\"Invalid Year.  Acceptable year range: 2010-2022.\")\n    return()\n    }\n  \n  # Numeric Variable check\n  # changed by Jay as it should receive True of False\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"PWGTP\")\n  if (!all(num_variables %in% valid_numeric_vars)) {\n    stop(\"Invalid Numeric Variable(s). Choose from: \", paste(valid_numeric_vars, collapse = \", \"))\n  }\n  \n  #if PWGTP is the only variable, return error.\n  if((length(num_variables) == 1 && num_variables == \"PWGTP\")){\n    print(\"Need another numerical variable other than PWGTP\")\n    return()\n  }\n  \n  #if PWGTP not in set, adds it\n  if(!(\"PWGTP\" %in% num_variables)){\n    num_variables &lt;-c(num_variables,\"PWGTP\")\n  }\n  \n  #Categorical Variable Check\n  if((length(cat_variables) == 0)){\n    print(\"Need at least one categorical variable\")\n    return()\n  }\n  \n  # cat variable choice check\n  # changed by Jay as if should receive True of False\n  valid_cat_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!all(cat_variables %in% valid_cat_vars)) {\n    stop(\"Invalid categorical variable(s) specified. Choose from: \", paste(valid_cat_vars, collapse = \", \"))\n  }\n  \n  \n  # Geography Check\n  # changed by Jay as if should receive True of False\n  valid_geography &lt;- c(\"ALL\", \"REGION\", \"DIVISION\", \"STATE\")\n  if (!geography %in% valid_geography) {\n    stop(\"Invalid Geography Variable. Choose from: \", paste(valid_geography, collapse = \", \"))\n  }\n\n  \n  #API key here:\n  API_key&lt;-\"2b989c8e8efa3003c17e6eb0ca728a968e04a441\" \n  \n  \n  #Adding num/cat variables to our url\n  variables_url&lt;-paste(c(num_variables,cat_variables),collapse=\",\")\n  \n  #Base URL w/ year variable\n  base_pums_url &lt;-paste0(\"https://api.census.gov/data/\",year,\"/acs/acs1/pums?get=\",variables_url)\n  \n  # added by Jay to subsetting the data\n  if (!is.null(Opt_subset)) {\n      #Adding geography to URL\n      if (geography == \"ALL\"){\n        full_url &lt;- paste(base_pums_url,\"&key=\",API_key,sep=\"\")}\n        else if (geography == \"REGION\"){\n          full_url &lt;- paste(base_pums_url,\"&for=region:\",Opt_subset,\"&key=\",API_key,sep=\"\")}\n        else if (geography == \"DIVISION\"){\n          full_url &lt;- paste(base_pums_url,\"for=division:\",Opt_subset,\"&key=\",API_key,sep=\"\")}\n        else if (geography == \"STATE\"){\n          full_url &lt;- paste(base_pums_url,\"&for=state:\",Opt_subset,\"&key=\",API_key,sep=\"\")}\n    } else {\n    full_url &lt;- paste(base_pums_url,\"&key=\",API_key,sep=\"\")}\n\n  \n  #API Fetch:\n  pums_fetch &lt;- httr::GET(full_url)\n  \n  # Check for a successful response\n  if (httr::status_code(pums_fetch) != 200) {\n    stop(\"Failed to retrieve data. Check the API URL and parameters.\")\n  }\n  \n  #Decoding data: \n  #TODO: Need to use helper function here to do this part:\n\n  pums_tibble &lt;- convert_to_tibble(pums_fetch)\n  #TODO: Clean data.  Fix column names etc...\n  \n  #TODO: Subset data for geography\n  # I think you already did this subset while api request\n  \n  # # added by Jay to convert numeric and time Variables\n  valid_time_vars &lt;- c(\"JWAP\", \"JWDP\")\n  for (col in colnames(pums_tibble)) {\n    if (col %in% num_variables && !col %in% valid_time_vars) {\n      # Convert to numeric\n      pums_tibble[[col]] &lt;- as.numeric(pums_tibble[[col]])\n    } else if(col %in% valid_time_vars){\n      pums_tibble[[col]] &lt;- sprintf(\"%03d\", as.numeric(pums_tibble[[col]]))\n    }\n  }\n  \n  # # added by Jay for Convert JWAP and JWDP to Time\n  if (\"JWAP\" %in% colnames(pums_tibble)) {\n    pums_tibble$JWAP &lt;- sapply(pums_tibble$JWAP, convert_time_code, time_catg_info = get_time(\"JWAP\"))\n    pums_tibble$JWAP &lt;- as.POSIXct(pums_tibble$JWAP)\n      }\n\n  if (\"JWDP\" %in% colnames(pums_tibble)) {\n      pums_tibble$JWDP &lt;- sapply(pums_tibble$JWDP, convert_time_code, time_catg_info = get_time(\"JWDP\"))\n      pums_tibble$JWDP &lt;- as.POSIXct(pums_tibble$JWDP)\n  }\n\n  \n  # # added by Jay to convert cat variables to factors\n  factor_labels &lt;- list(\n    FER = c(\"N/A\", \"Yes\", \"No\"),\n    HHL = c(\"N/A\", \"English Only\", \"Spanish\", \"Other Indo-European languages\", \"Asian and Pacific Island Languages\", \"Other Languages\"),\n    HISPEED = c(\"N/A\", \"Yes\", \"No\"),\n    JWTRNS = c(\"N/A\", \"Car, truck or van\", \"Bus\", \"Subway or elevated rail\", \"Long distance train or commuter rail\", \n               \"Light rail, street car or trolley\", \"Ferryboat\", \"Taxicab\", \"Motorcycle\", \"Bicycle\", \"Walked\", \n               \"Worked from home\", \"Other method\"),\n    SCH = c(\"N/A\", \"No, has not attended in the last 3 months\", \n            \"Yes, public school or public college\", \"Yes, private school or college or home school\"),\n    SEX = c(\"MALE\", \"FEMALE\")\n  )\n\nfor (col in colnames(pums_tibble)) {\n  if (col %in% names(factor_labels)) {\n    pums_tibble[[col]] &lt;- factor(pums_tibble[[col]], levels = seq_along(factor_labels[[col]]), labels = factor_labels[[col]])\n  }\n}\n\n\n  \n  #Diagonostics: delete later\n  print(paste(\"API URL:\",full_url))\n  print(\"Numeric Variables:\")\n  print(num_variables)\n  print(\"Categorical Variables:\")\n  print(cat_variables)\n  print(paste(\"Geography:\",geography))\n  \n  class(pums_tibble) &lt;- c(\"census\", class(pums_tibble))\n  \n  #Returns tibble\n  return(pums_tibble)\n}\n\nTesting exception cases/output:\n\n# Pums_APIdata(2009)\n# #Pums_APIdata(2012)\n# Pums_APIdata(2012,num_variables=\"pwgtp\")\n# Pums_APIdata(2012,num_variables =\"agep\")\n# Pums_APIdata(2012,num_variables=\"Agep\",geography = \"City\")\n\n\ntest &lt;- Pums_APIdata(year = 2022, num_variables = c(\"AGEP\"),cat_variables =c(\"SEX\"), geography = \"STATE\", Opt_subset = '01')\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n[1] \"API URL: https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,SEX&for=state:01&key=2b989c8e8efa3003c17e6eb0ca728a968e04a441\"\n[1] \"Numeric Variables:\"\n[1] \"AGEP\"  \"PWGTP\"\n[1] \"Categorical Variables:\"\n[1] \"SEX\"\n[1] \"Geography: STATE\"\n\n\n\n# class(test)\ntest\n\n# A tibble: 51,580 × 4\n    AGEP PWGTP SEX    state\n   &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;  &lt;chr&gt;\n 1    81    21 FEMALE 01   \n 2    79   313 FEMALE 01   \n 3    55    70 MALE   01   \n 4    45    88 FEMALE 01   \n 5    46   161 FEMALE 01   \n 6    37    23 FEMALE 01   \n 7    54    29 MALE   01   \n 8    28    29 MALE   01   \n 9    30    35 FEMALE 01   \n10    93    71 FEMALE 01   \n# ℹ 51,570 more rows\n\n\n\n\n\nLastly, write a function that allows the user to specify multiple years of survey data (and all the other\n\n\noptions above)\n\n# added by Jay for calling single year API many times\nPums_multiYearData &lt;- function(years = 2022, num_variables = c(\"AGEP\", \"PWGTP\"), \n                               cat_variables = \"SEX\", geography = \"STATE\", Opt_subset = \"01\") {\n  all_data &lt;- purrr::map_dfr(years, ~ {\n    year_data &lt;- Pums_APIdata(year = .x, num_variables = num_variables, \n                              cat_variables = cat_variables, geography = geography, \n                              Opt_subset = Opt_subset)\n    year_data$YEAR &lt;- .x\n    return(year_data)\n  })\n  \n  return(all_data)\n}\n\n\nmulti_year_data &lt;- Pums_multiYearData(years = c(2022), num_variables = c(\"AGEP\", \"PWGTP\",\"JWAP\"))\n\n[1] \"API URL: https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,JWAP,SEX&for=state:01&key=2b989c8e8efa3003c17e6eb0ca728a968e04a441\"\n[1] \"Numeric Variables:\"\n[1] \"AGEP\"  \"PWGTP\" \"JWAP\" \n[1] \"Categorical Variables:\"\n[1] \"SEX\"\n[1] \"Geography: STATE\"\n\nmulti_year_data\n\n# A tibble: 51,580 × 6\n    AGEP PWGTP JWAP   SEX    state  YEAR\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;fct&gt;  &lt;chr&gt; &lt;dbl&gt;\n 1    85    69 NA     FEMALE 01     2022\n 2    51    22 NA     MALE   01     2022\n 3    36    45 NA     FEMALE 01     2022\n 4    74     4 NA     MALE   01     2022\n 5    49    47 NA     MALE   01     2022\n 6    31    38 NA     MALE   01     2022\n 7    76    13 NA     FEMALE 01     2022\n 8    60    38 NA     MALE   01     2022\n 9    35    66 NA     MALE   01     2022\n10    72    31 NA     FEMALE 01     2022\n# ℹ 51,570 more rows\n\n\nSummary function\n\n# added by Jay for summarize num and cat variables\nsummary.census &lt;- function(pums_tibble, numeric_vars = NULL, cat_vars = NULL) {\n  \n  # if user give null then get all \n  if(is.null(numeric_vars)){\n    numeric_vars &lt;- setdiff(names(pums_tibble)[sapply(pums_tibble, is.numeric)], \"PWGTP\")\n  }\n  if(is.null(cat_vars)){\n   cat_vars &lt;- names(pums_tibble)[sapply(pums_tibble, is.factor)] \n  }\n  \n  summary_list &lt;- list()\n  weight_vector &lt;- pums_tibble$PWGTP\n  \n  for (num_var in numeric_vars) {\n    num_vector &lt;- pums_tibble[[num_var]]\n    \n    # added remove N/A\n    sample_mean &lt;- sum(num_vector * weight_vector, na.rm = TRUE) / sum(weight_vector, na.rm = TRUE)\n    \n    # added remove N/A\n    sample_stddev &lt;- sqrt(sum((num_vector^2) * weight_vector, na.rm = TRUE) / sum(weight_vector, na.rm = TRUE) - sample_mean^2)\n\n    summary_list[[paste0(num_var, \"_mean\")]] &lt;- sample_mean\n    summary_list[[paste0(num_var, \"_stddev\")]] &lt;- sample_stddev\n  }\n  \n  # Summarize categorical variables\n  for (cat_var in cat_vars) {\n    cat_vector &lt;- pums_tibble[[cat_var]]\n    \n    # not sure about this. will ask on forum what is summary of cat variable\n    cat_summary &lt;- pums_tibble %&gt;%\n      group_by(!!sym(cat_var)) %&gt;%\n      summarize(weighted_count = sum(PWGTP, na.rm = TRUE)) %&gt;%\n      ungroup()\n    \n    summary_list[[paste0(cat_var, \"_counts\")]] &lt;- cat_summary\n  }\n  \n  return(summary_list)\n}\n\n\ncensus_summary &lt;- summary.census(test)\n\n\ncensus_summary\n\n$AGEP_mean\n[1] 39.75216\n\n$AGEP_stddev\n[1] 23.44001\n\n$SEX_counts\n# A tibble: 2 × 2\n  SEX    weighted_count\n  &lt;fct&gt;           &lt;dbl&gt;\n1 MALE          2461361\n2 FEMALE        2612935\n\n\nPlotting variables\n\n# added by Jay for plotting box plot\nplot.census &lt;- function(census_tibble, cat_var, num_var) {\n  if (!(cat_var %in% colnames(census_tibble))) {\n    stop(paste(\"Categorical variable\", cat_var, \"not found in the dataset.\"))\n  }\n  \n  if (!(num_var %in% colnames(census_tibble))) {\n    stop(paste(\"Numeric variable\", num_var, \"not found in the dataset.\"))\n  }\n  \n  # added labels and title\n  ggplot(census_tibble, aes(x = get(cat_var), y = get(num_var), weight = PWGTP)) +\n    geom_boxplot() + labs(x = cat_var, y = num_var, title = paste(\"Boxplot of\", num_var, \"by\", cat_var))\n}\n\n\nplot.census(test, cat_var = \"SEX\", num_var = \"AGEP\")\n\nWarning in .recacheSubclasses(def@className, def, env): undefined subclass\n\"ndiMatrix\" of class \"replValueSp\"; definition not updated"
  }
]