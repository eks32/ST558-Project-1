[
  {
    "objectID": "GroupAMain.html",
    "href": "GroupAMain.html",
    "title": "ST558 Project 1: Group A",
    "section": "",
    "text": "Loading required libraries, include = FALSE.\n\nNext, write a helper function to take what is returned by GET() and turn it into a nice tibble.\n\n??? idk what this means\n\n\nI think something like this. I called this function in the end of api_fun\n\nconvert_to_tibble &lt;- function(response) {\n  json_content &lt;- fromJSON(rawToChar(response$content))\n  as_tibble(json_content[-1, ]) |&gt;\n    setNames(json_content[1, ])\n}\n\n\nget_time &lt;- function(variable) {\n  url &lt;- paste0(\"https://api.census.gov/data/2022/acs/acs1/pums/variables/\", variable, \".json\")\n  response &lt;- GET(url)\n  \n  if (status_code(response) != 200) {\n    stop(\"error for: \", variable)\n  }\n  \n  temp_list &lt;- fromJSON(rawToChar(response$content))\n  time_info &lt;- temp_list$values$item\n  time_catg_info &lt;- time_info[sort(names(time_info))]\n  \n  return(time_catg_info)\n}\n\nconvert_time_code &lt;- function(code, time_catg_info) {\n  if (code %in% names(time_catg_info)) {\n    # extract the time range as a string\n    time_range &lt;- time_catg_info[[code]]\n    time_parts &lt;- strsplit(time_range, \" to \")[[1]]\n    time_parts &lt;- gsub(\"a.m.\", \"AM\", time_parts)\n    time_parts &lt;- gsub(\"p.m.\", \"PM\", time_parts)\n    start_time &lt;- strptime(time_parts[1], format = \"%I:%M %p\")\n    end_time &lt;- strptime(time_parts[2], format = \"%I:%M %p\")\n    \n    # calc the middle of the time period\n    if (!is.na(start_time) && !is.na(end_time)) {\n      middle_time &lt;- start_time + as.difftime(difftime(end_time, start_time, units = \"mins\") / 2, units = \"mins\")\n      return(as.POSIXct(middle_time, format = \"%Y-%m-%d %H:%M:%S\"))\n    } else {\n      return(NA)\n    }\n  } else {\n    return(NA)\n  }\n}\n\n\ntypeof(convert_time_code(\"055\", get_time(\"JWAP\")))\n\n[1] \"double\"\n\n# get_time(\"JWAP\")\n\n\n\n\nAPI Call\n\nTODO:\nData processing: Data cleaning: Subsetting data. Will add narrative on sunday.\n\nPums_APIdata &lt;- function(year=2022, num_variables =c(\"AGEP\",\"PWGTP\"),cat_variables=\"SEX\",geography=\"ALL\",Opt_subset=NULL){\n  #Automatically capitalize our variables\n  num_variables&lt;-toupper(num_variables)\n  cat_variables&lt;-toupper(cat_variables)\n  geography&lt;-toupper(geography) \n  \n  #Year Range Check\n  if (year &lt; 2010 | year &gt; 2022){\n    print(\"Invalid Year.  Acceptable year range: 2010-2022.\")\n    return()\n    }\n  \n  #Numeric Variable check\n  # changed as if should receive True of False\n  valid_numeric_vars &lt;- c(\"AGEP\", \"GASP\", \"GRPIP\", \"JWAP\", \"JWDP\", \"JWMNP\", \"PWGTP\")\n  if (!all(num_variables %in% valid_numeric_vars)) {\n    stop(\"Invalid Numeric Variable(s). Choose from: \", paste(valid_numeric_vars, collapse = \", \"))\n  }\n  \n  #if PWGTP is the only variable, return error.\n  if((length(num_variables) == 1 && num_variables == \"PWGTP\")){\n    print(\"Need another numerical variable other than PWGTP\")\n    return()\n  }\n  \n  #if PWGTP not in set, adds it\n  if(!(\"PWGTP\" %in% num_variables)){\n    num_variables &lt;-c(num_variables,\"PWGTP\")\n  }\n  \n  #Categorical Variable Check\n  if((length(cat_variables) == 0)){\n    print(\"Need at least one categorical variable\")\n    return()\n  }\n  \n  # cat variable choice check\n  # changed as if should receive True of False\n  valid_cat_vars &lt;- c(\"FER\", \"HHL\", \"HISPEED\", \"JWTRNS\", \"SCH\", \"SCHL\", \"SEX\")\n  if (!all(cat_variables %in% valid_cat_vars)) {\n    stop(\"Invalid categorical variable(s) specified. Choose from: \", paste(valid_cat_vars, collapse = \", \"))\n  }\n  \n  \n  # Geography Check\n  # changed as if should receive True of False\n  valid_geography &lt;- c(\"ALL\", \"REGION\", \"DIVISION\", \"STATE\")\n  if (!geography %in% valid_geography) {\n    stop(\"Invalid Geography Variable. Choose from: \", paste(valid_geography, collapse = \", \"))\n  }\n\n  \n  #API key here:\n  API_key&lt;-\"2b989c8e8efa3003c17e6eb0ca728a968e04a441\" \n  \n  \n  #Adding num/cat variables to our url\n  variables_url&lt;-paste(c(num_variables,cat_variables),collapse=\",\")\n  \n  #Base URL w/ year variable\n  base_pums_url &lt;-paste0(\"https://api.census.gov/data/\",year,\"/acs/acs1/pums?get=\",variables_url)\n  \n  if (!is.null(Opt_subset)) {\n      #Adding geography to URL\n      if (geography == \"ALL\"){\n        full_url &lt;- paste(base_pums_url,\"&SCHL=24&key=\",API_key,sep=\"\")}\n        else if (geography == \"REGION\"){\n          full_url &lt;- paste(base_pums_url,\"&for=region:*&SCHL=24&key=\",API_key,sep=\"\")}\n        else if (geography == \"DIVISION\"){\n          full_url &lt;- paste(base_pums_url,\"for=division:*&SCHL=24&key=\",API_key,sep=\"\")}\n        else if (geography == \"STATE\"){\n          full_url &lt;- paste(base_pums_url,\"&for=state:*&SCHL=24&key=\",API_key,sep=\"\")}\n    } else {\n    full_url &lt;- paste(base_pums_url,\"&SCHL=24&key=\",API_key,sep=\"\")}\n\n  \n  #API Fetch:\n  pums_fetch &lt;- httr::GET(full_url)\n  \n  # Check for a successful response\n  if (httr::status_code(pums_fetch) != 200) {\n    stop(\"Failed to retrieve data. Check the API URL and parameters.\")\n  }\n  \n  #Decoding data: \n  #TODO: Need to use helper function here to do this part:\n\n  pums_tibble &lt;- convert_to_tibble(pums_fetch)\n  #TODO: Clean data.  Fix column names etc...\n  \n  #TODO: Subset data for geography\n  # I think you already did this subset while api request\n  \n  # convert numeric and time Variables\n  valid_time_vars &lt;- c(\"JWAP\", \"JWDP\")\n  for (col in colnames(pums_tibble)) {\n    if (col %in% num_variables && !col %in% valid_time_vars) {\n      # Convert to numeric\n      pums_tibble[[col]] &lt;- as.numeric(pums_tibble[[col]])\n    } else if(col %in% valid_time_vars){\n      pums_tibble[[col]] &lt;- sprintf(\"%03d\", as.numeric(pums_tibble[[col]]))\n    }\n  }\n  \n  # Convert JWAP and JWDP to Time\n  if (\"JWAP\" %in% colnames(pums_tibble)) {\n    pums_tibble$JWAP &lt;- sapply(pums_tibble$JWAP, convert_time_code, time_catg_info = get_time(\"JWAP\"))\n    pums_tibble$JWAP &lt;- as.POSIXct(pums_tibble$JWAP)\n      }\n\n  if (\"JWDP\" %in% colnames(pums_tibble)) {\n      pums_tibble$JWDP &lt;- sapply(pums_tibble$JWDP, convert_time_code, time_catg_info = get_time(\"JWDP\"))\n      pums_tibble$JWDP &lt;- as.POSIXct(pums_tibble$JWDP)\n  }\n\n  \n  # cat variables to factors\n  factor_levels &lt;- list(\n    FER = c(\"0\", \"1\", \"2\"),\n    HHL = c(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"),\n    HISPEED = c(\"0\", \"1\", \"2\"),\n    JWTRNS = c(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"), # changed to remove pre-zero from each value\n    SCH = c(\"0\", \"1\", \"2\", \"3\"),\n    SEX = c(\"1\", \"2\")\n  )\n  \n  for (col in colnames(pums_tibble)) {\n    if (col %in% names(factor_levels)) {\n      # Convert to factor with specified levels\n      pums_tibble[[col]] &lt;- factor(pums_tibble[[col]], levels = factor_levels[[col]])\n    }\n  }\n  \n  #Diagonostics: delete later\n  print(paste(\"API URL:\",full_url))\n  print(\"Numeric Variables:\")\n  print(num_variables)\n  print(\"Categorical Variables:\")\n  print(cat_variables)\n  print(paste(\"Geography:\",geography))\n  \n  \n  #Returns tibble\n  return(pums_tibble)\n}\n\nTesting exception cases/output:\n\n# Pums_APIdata(2009)\n# #Pums_APIdata(2012)\n# Pums_APIdata(2012,num_variables=\"pwgtp\")\n# Pums_APIdata(2012,num_variables =\"agep\")\n# Pums_APIdata(2012,num_variables=\"Agep\",geography = \"City\")\n\n\ntest &lt;- Pums_APIdata(year = 2022, num_variables = c(\"AGEP\", \"JWAP\", \"JWDP\"),cat_variables =c(\"SEX\"))\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\n[1] \"API URL: https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,JWAP,JWDP,PWGTP,SEX&SCHL=24&key=2b989c8e8efa3003c17e6eb0ca728a968e04a441\"\n[1] \"Numeric Variables:\"\n[1] \"AGEP\"  \"JWAP\"  \"JWDP\"  \"PWGTP\"\n[1] \"Categorical Variables:\"\n[1] \"SEX\"\n[1] \"Geography: ALL\"\n\ntest\n\n# A tibble: 44,079 × 6\n    AGEP JWAP                JWDP                PWGTP SEX   SCHL \n   &lt;dbl&gt; &lt;dttm&gt;              &lt;dttm&gt;              &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt;\n 1    88 NA                  NA                      6 2     24   \n 2    84 NA                  NA                     23 2     24   \n 3    57 2024-09-29 05:02:00 2024-09-29 05:02:00    23 1     24   \n 4    37 NA                  NA                     80 1     24   \n 5    82 NA                  NA                     16 1     24   \n 6    77 NA                  NA                    107 1     24   \n 7    28 NA                  NA                     10 2     24   \n 8    59 NA                  NA                     22 1     24   \n 9    36 2024-09-29 10:17:00 2024-09-29 10:04:30   127 2     24   \n10    55 NA                  NA                     46 2     24   \n# ℹ 44,069 more rows\n\n\n\n\n\nLastly, write a function that allows the user to specify multiple years of survey data (and all the other\n\n\noptions above)\n\nPums_multiYearData &lt;- function(years = 2022, num_variables = c(\"AGEP\", \"PWGTP\"), \n                               cat_variables = \"SEX\", geography = \"ALL\", Opt_subset = NULL) {\n  all_data &lt;- purrr::map_dfr(years, ~ {\n    year_data &lt;- Pums_APIdata(year = .x, num_variables = num_variables, \n                              cat_variables = cat_variables, geography = geography, \n                              Opt_subset = Opt_subset)\n    year_data$YEAR &lt;- .x\n    return(year_data)\n  })\n  \n  return(all_data)\n}\n\n\nmulti_year_data &lt;- Pums_multiYearData(years = c(2022,2021,2019), num_variables = c(\"AGEP\", \"PWGTP\",\"JWAP\"))\n\n[1] \"API URL: https://api.census.gov/data/2022/acs/acs1/pums?get=AGEP,PWGTP,JWAP,SEX&SCHL=24&key=2b989c8e8efa3003c17e6eb0ca728a968e04a441\"\n[1] \"Numeric Variables:\"\n[1] \"AGEP\"  \"PWGTP\" \"JWAP\" \n[1] \"Categorical Variables:\"\n[1] \"SEX\"\n[1] \"Geography: ALL\"\n[1] \"API URL: https://api.census.gov/data/2021/acs/acs1/pums?get=AGEP,PWGTP,JWAP,SEX&SCHL=24&key=2b989c8e8efa3003c17e6eb0ca728a968e04a441\"\n[1] \"Numeric Variables:\"\n[1] \"AGEP\"  \"PWGTP\" \"JWAP\" \n[1] \"Categorical Variables:\"\n[1] \"SEX\"\n[1] \"Geography: ALL\"\n[1] \"API URL: https://api.census.gov/data/2019/acs/acs1/pums?get=AGEP,PWGTP,JWAP,SEX&SCHL=24&key=2b989c8e8efa3003c17e6eb0ca728a968e04a441\"\n[1] \"Numeric Variables:\"\n[1] \"AGEP\"  \"PWGTP\" \"JWAP\" \n[1] \"Categorical Variables:\"\n[1] \"SEX\"\n[1] \"Geography: ALL\"\n\nmulti_year_data\n\n# A tibble: 123,669 × 6\n    AGEP PWGTP JWAP                SEX   SCHL   YEAR\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt;              &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt;\n 1    88     6 NA                  2     24     2022\n 2    84    23 NA                  2     24     2022\n 3    57    23 2024-09-29 05:02:00 1     24     2022\n 4    37    80 NA                  1     24     2022\n 5    82    16 NA                  1     24     2022\n 6    77   107 NA                  1     24     2022\n 7    28    10 NA                  2     24     2022\n 8    59    22 NA                  1     24     2022\n 9    36   127 2024-09-29 10:17:00 2     24     2022\n10    55    46 NA                  2     24     2022\n# ℹ 123,659 more rows"
  }
]