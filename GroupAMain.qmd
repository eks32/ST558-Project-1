---
title: "ST558 Project 1: Group A"
author: "Eric Song & Jay Thakur"
format: html
editor: visual
---

*Loading required libraries, include = FALSE.*

```{r, include=FALSE}
library(tidyverse)
library(httr)
library(tidycensus)
library(jsonlite)
```

### Next, write a helper function to take what is returned by GET() and turn it into a nice tibble. 
######  ??? idk what this means



### API Call

##### TODO: 
Data processing: 
Data cleaning:
Subsetting data.
Will add narrative on sunday.  

```{r}
Pums_APIdata <- function(year=2022, num_variables =c("AGEP","PWGTP"),cat_variables="SEX",geography="ALL",Opt_subset){
  #Automatically capitalize our variables
  num_variables<-toupper(num_variables)
  cat_variables<-toupper(cat_variables)
  geography<-toupper(geography) 
  
  #Year Range Check
  if (year < 2010 | year > 2022){
    print("Invalid Year.  Acceptable year range: 2010-2022.")
    return()
    }
  
  #Numeric Variable check
  if (!num_variables %in% c("AGEP","GASP","JWAP","JWDP","JWMNP","PWGTP")){
    print("Invalid Numeric Variable")
    return()
    }
  #if PWGTP is the only variable, return error.
  else if((length(num_variables) == 1 && num_variables == "PWGTP")){
    print("Need another numerical variable other than PWGTP")
    return()
    }
  #if PWGTP not in set, adds it
  else if(!("PWGTP" %in% num_variables)){
    num_variables <-c(num_variables,"PWGTP")
  }
  
  #Categorical Variable Check
  #TODO: add error checking for categorical
  
  #Geography Check
  if (!geography %in% c("ALL", "REGION", "DIVISION", "STATE")){
    print("Invalid Geography Variable: Choose from ALL,REGION,DIVISION,or STATE.")
    return()
  }

  
  #API key here:
  API_key<-"2b989c8e8efa3003c17e6eb0ca728a968e04a441" 
  
  
  #Adding num/cat variables to our url
  variables_url<-paste(c(num_variables,cat_variables),collapse=",")
  
  #Base URL w/ year variable
  base_pums_url <-paste("https://api.census.gov/data/",year,"/acs/acs1/pums?get=",variables_url,sep="")
  
  #Adding geography to URL
  if (geography == "ALL"){
    full_url <- paste(base_pums_url,"&SCHL=24&key=",API_key,sep="")}
    else if (geography == "REGION"){
      full_url <- paste(base_pums_url,"&for=region:*&SCHL=24&key=",API_key,sep="")}
    else if (geograph == "DIVISION"){
      full_url <- paste(base_pums_url,"for=division:*&SCHL=24&key=",API_key,sep="")}
    else if (geography == "STATE"){
      full_url <- paste(base_pums_url,"&for=state:*&SCHL=24&key=",API_key,sep="")}
  
  #API Fetch:
  pums_fetch <- httr::GET(full_url)
  
  #Decoding data: 
  #TODO: Need to use helper function here to do this part:
  
  pums_df <- fromJSON(rawToChar(pums_fetch$content))
  pums_tibble <- as_tibble(pums_df)
  #TODO: Clean data.  Fix column names etc...
  #TODO: Subset data for geography
  
  #Diagonostics: delete later
  print(paste("API URL:",full_url))
  print("Numeric Variables:")
  print(num_variables)
  print("Categorical Variables:")
  print(cat_variables)
  print(paste("Geography:",geography))
  
  
  #Returns tibble
  return(pums_tibble)
}
```

Testing exception cases/output:
```{r, echo=TRUE}
Pums_APIdata(2009)
#Pums_APIdata(2012)
Pums_APIdata(2012,num_variables="pwgtp")
Pums_APIdata(2012,num_variables ="agep")
Pums_APIdata(2012,num_variables="Agep",geography = "City")
```

###  Lastly, write a function that allows the user to specify multiple years of survey data (and all the other
### options above)


